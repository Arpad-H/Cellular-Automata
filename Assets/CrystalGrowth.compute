#pragma kernel CrystalGrowth

RWStructuredBuffer<int> currentGrid;
RWStructuredBuffer<int> nextGrid;

RWStructuredBuffer<float4> cubeColors;
RWStructuredBuffer<float4> cubePositions;

uint gridSize;
float maxDistance;
float3 center;

[numthreads(8, 8, 8)]
void CrystalGrowth(uint3 id : SV_DispatchThreadID)
{
    int3 intId = int3(id.x, id.y, id.z);

    int idIndex = id.x + id.y * int(gridSize) + id.z * int(gridSize * gridSize);

    int aliveNeighbors = 0;

    // Check neighbors
    int3 offsets[6] = {
        int3(-1,  0,  0),
        int3( 1,  0,  0),
        int3( 0, -1,  0),
        int3( 0,  1,  0),
        int3( 0,  0, -1),
        int3( 0,  0,  1)
    };

    for (int i = 0; i < 6; i++)
    {
        int3 neighborPos = intId + offsets[i];
        neighborPos.x = (neighborPos.x + gridSize) % gridSize; // Wrap x
        neighborPos.y = (neighborPos.y + gridSize) % gridSize; // Wrap y
        neighborPos.z = (neighborPos.z + gridSize) % gridSize; // Wrap z

        int neighborIndex = neighborPos.x + neighborPos.y * gridSize + neighborPos.z * gridSize * gridSize;
        int neighborState = currentGrid[neighborIndex];
        if (neighborState == 1) aliveNeighbors++;
    }

    int currentState = currentGrid[idIndex];
    
    // Apply rules
    int newState;
    if (currentState == 1) // Survival
    {
        newState = 1;
    }
    else if (currentState == 0) // Birth
    {
        newState = (aliveNeighbors == 3 || aliveNeighbors == 1  ) ? 1 : 0; 
    }
    else
    {
        newState = 0; 
    }
    
    switch (newState)
    {
    case 1:
        float3 color = normalize(intId);
        cubeColors[idIndex] = float4(color, 1);
        break;
    case 0:
        cubeColors[idIndex] = float4(0, 0, 0, 0);
        break;
    default:
        cubeColors[idIndex] = float4(0, 0, 0, 0);
        break;
    }


    nextGrid[idIndex] = newState;
    cubePositions[idIndex] = float4(id.x, id.y, id.z, 1);
}
