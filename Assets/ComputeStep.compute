#pragma kernel ComputeStep

RWStructuredBuffer<int> currentGrid;
RWStructuredBuffer<int> nextGrid;

RWStructuredBuffer<float4> cubeColors;
RWStructuredBuffer<float4> cubePositions;

uint gridSize;
float maxDistance;
float3 center;

[numthreads(8, 8, 8)]
void ComputeStep(uint3 id : SV_DispatchThreadID)
{
    int3 intId = int3(id.x, id.y, id.z);

    int idIndex = id.x + id.y * int(gridSize) + id.z * int(gridSize * gridSize);

    int aliveNeighbors = 0;

    // Check neighbors
    for (int dx = -1; dx <= 1; dx++)
    {
        for (int dy = -1; dy <= 1; dy++)
        {
            for (int dz = -1; dz <= 1; dz++)
            {
                if (dx == 0 && dy == 0 && dz == 0) continue;

                int3 neighborPos = intId + int3(dx, dy, dz);
                neighborPos.x = (neighborPos.x + gridSize) % gridSize; // Wrap x
                neighborPos.y = (neighborPos.y + gridSize) % gridSize; // Wrap y
                neighborPos.z = (neighborPos.z + gridSize) % gridSize; // Wrap z

                    int neighborIndex = neighborPos.x + neighborPos.y * int(gridSize) + neighborPos.z * int(
                        gridSize * gridSize);
                    int neighborState = currentGrid[neighborIndex];
                    if (neighborState == 4) aliveNeighbors++;
                
            }
        }
    }

    int currentState = currentGrid[idIndex];
    
    // Apply rules
    int newState;
    if (currentState > 0) // Survival
    {
        newState = (aliveNeighbors == 4) ? currentState : max(0, currentState - 1);
    }
    else if (currentState == 0) // Birth
    {
        newState = (aliveNeighbors == 4) ? 4 : 0; 
    }
    // else if (currentState > 1) // Decay
    // {
    //     newState = max(0, currentState - 1); 
    // }
    else
    {
        newState = 0; 
    }


    switch (newState)
    {
    case 4:
        cubeColors[idIndex] = float4(1, 1, 0, 1);
        break;
    case 3:
        cubeColors[idIndex] = float4(1, 0.45, 0, 1);
        break;
    case 2:
        cubeColors[idIndex] = float4(1, 0, 0, 1);
        break;
    case 1:
        cubeColors[idIndex] = float4(0.5, 0, 0, 1);
        break;
    case 0:
        cubeColors[idIndex] = float4(0, 0, 0, 0);
        break;
    default:
        cubeColors[idIndex] = float4(0, 0, 0, 0);
        break;
    }


    nextGrid[idIndex] = newState;
    cubePositions[idIndex] = float4(id.x, id.y, id.z, 1);
}
